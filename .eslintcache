[{"/Users/chazadmin/code/projects/night-cage/src/index.tsx":"1","/Users/chazadmin/code/projects/night-cage/src/serviceWorker.ts":"2","/Users/chazadmin/code/projects/night-cage/src/app/store.ts":"3","/Users/chazadmin/code/projects/night-cage/src/App.tsx":"4","/Users/chazadmin/code/projects/night-cage/src/shared/Header.tsx":"5","/Users/chazadmin/code/projects/night-cage/src/features/board/PlayHome.tsx":"6","/Users/chazadmin/code/projects/night-cage/src/features/board/ClassicBoard.tsx":"7","/Users/chazadmin/code/projects/night-cage/src/features/tiles/Tile.tsx":"8","/Users/chazadmin/code/projects/night-cage/src/theme/themes.ts":"9","/Users/chazadmin/code/projects/night-cage/src/shared/layout/Heading.tsx":"10","/Users/chazadmin/code/projects/night-cage/src/shared/layout/Link.tsx":"11","/Users/chazadmin/code/projects/night-cage/src/shared/layout/Anchor.tsx":"12","/Users/chazadmin/code/projects/night-cage/src/shared/layout/MenuBurger.tsx":"13","/Users/chazadmin/code/projects/night-cage/src/features/tiles/index.ts":"14","/Users/chazadmin/code/projects/night-cage/src/features/tiles/tileSlice.ts":"15","/Users/chazadmin/code/projects/night-cage/src/features/tiles/PassageT.tsx":"16","/Users/chazadmin/code/projects/night-cage/src/features/tiles/PassageStraight.tsx":"17","/Users/chazadmin/code/projects/night-cage/src/features/tiles/Pit.tsx":"18","/Users/chazadmin/code/projects/night-cage/src/features/tiles/WaxEater.tsx":"19","/Users/chazadmin/code/projects/night-cage/src/features/tiles/StartTile.tsx":"20","/Users/chazadmin/code/projects/night-cage/src/features/tiles/Gate.tsx":"21","/Users/chazadmin/code/projects/night-cage/src/features/tiles/KeyTile.tsx":"22","/Users/chazadmin/code/projects/night-cage/src/features/tiles/PassageFourWay.tsx":"23","/Users/chazadmin/code/projects/night-cage/src/features/tiles/queue/Queue.tsx":"24","/Users/chazadmin/code/projects/night-cage/src/features/player/index.ts":"25","/Users/chazadmin/code/projects/night-cage/src/features/player/Candle.tsx":"26","/Users/chazadmin/code/projects/night-cage/src/features/player/CandleQueue.tsx":"27","/Users/chazadmin/code/projects/night-cage/src/features/player/playerSlice.ts":"28","/Users/chazadmin/code/projects/night-cage/src/features/player/types.ts":"29"},{"size":648,"mtime":1608087893891,"results":"30","hashOfConfig":"31"},{"size":5424,"mtime":1608087893892,"results":"32","hashOfConfig":"31"},{"size":491,"mtime":1609275396657,"results":"33","hashOfConfig":"31"},{"size":1035,"mtime":1609263532433,"results":"34","hashOfConfig":"31"},{"size":1786,"mtime":1609003950958,"results":"35","hashOfConfig":"31"},{"size":618,"mtime":1609263491669,"results":"36","hashOfConfig":"31"},{"size":1260,"mtime":1609263010342,"results":"37","hashOfConfig":"31"},{"size":3711,"mtime":1609274222216,"results":"38","hashOfConfig":"31"},{"size":939,"mtime":1609003950960,"results":"39","hashOfConfig":"31"},{"size":1817,"mtime":1609003950959,"results":"40","hashOfConfig":"31"},{"size":1638,"mtime":1609003950959,"results":"41","hashOfConfig":"31"},{"size":1749,"mtime":1609003950959,"results":"42","hashOfConfig":"31"},{"size":658,"mtime":1609003950960,"results":"43","hashOfConfig":"31"},{"size":501,"mtime":1609264174444,"results":"44","hashOfConfig":"31"},{"size":5448,"mtime":1609275726594,"results":"45","hashOfConfig":"31"},{"size":717,"mtime":1609003950955,"results":"46","hashOfConfig":"31"},{"size":660,"mtime":1609003950955,"results":"47","hashOfConfig":"31"},{"size":820,"mtime":1609100506731,"results":"48","hashOfConfig":"31"},{"size":1336,"mtime":1609003950956,"results":"49","hashOfConfig":"31"},{"size":1402,"mtime":1609100506731,"results":"50","hashOfConfig":"31"},{"size":1401,"mtime":1609003950954,"results":"51","hashOfConfig":"31"},{"size":1410,"mtime":1609003950954,"results":"52","hashOfConfig":"31"},{"size":782,"mtime":1609003950955,"results":"53","hashOfConfig":"31"},{"size":2056,"mtime":1609264996282,"results":"54","hashOfConfig":"31"},{"size":101,"mtime":1609260887488,"results":"55","hashOfConfig":"31"},{"size":1742,"mtime":1609273950518,"results":"56","hashOfConfig":"31"},{"size":926,"mtime":1609263249268,"results":"57","hashOfConfig":"31"},{"size":1718,"mtime":1609274081244,"results":"58","hashOfConfig":"31"},{"size":375,"mtime":1609274051454,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"hoive5",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"62"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/chazadmin/code/projects/night-cage/src/index.tsx",[],["124","125"],"/Users/chazadmin/code/projects/night-cage/src/serviceWorker.ts",[],"/Users/chazadmin/code/projects/night-cage/src/app/store.ts",[],"/Users/chazadmin/code/projects/night-cage/src/App.tsx",["126"],"import React from 'react';\r\n// import logo from './logo.svg';\r\nimport styled, { ThemeProvider } from \"styled-components\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Header from \"./shared/Header\";\r\nimport PlayHome from \"./features/board/PlayHome\";\r\nimport { darkTheme, rootVars } from \"./theme/themes\";\r\n\r\n// import { Counter } from './features/counter/Counter';\r\n// import './App.css';\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n    <ThemeProvider theme={darkTheme}>\r\n      <Router>\r\n        <StyledApp className=\"App\">\r\n          {/* <Header /> */}\r\n          <Switch>\r\n            <Route path=\"/play\">\r\n              <PlayHome />\r\n            </Route>\r\n          </Switch>\r\n        </StyledApp>\r\n      </Router>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nconst StyledApp = styled.div`\r\n  ${rootVars};\r\n  background-color: var(--pBase);\r\n  /* background-color: ${({ theme }) => theme.pBase}; */\r\n  color: ${({ theme }) => theme.pText};\r\n  max-width: 100vw;\r\n  min-height: 100vh;\r\n`;\r\n\r\nexport default App;\r\n","/Users/chazadmin/code/projects/night-cage/src/shared/Header.tsx",[],["127","128"],"/Users/chazadmin/code/projects/night-cage/src/features/board/PlayHome.tsx",[],"/Users/chazadmin/code/projects/night-cage/src/features/board/ClassicBoard.tsx",[],"/Users/chazadmin/code/projects/night-cage/src/features/tiles/Tile.tsx",["129"],"import React, { ReactElement, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectTile, selectTiles, setPlayer, setTileFromQueue } from \"./tileSlice\";\n\nimport {\n  Gate,\n  KeyTile,\n  PassageFourWay,\n  PassageStraight,\n  PassageT,\n  Pit,\n  StartTile,\n  WaxEater\n} from \"./\";\nimport { Candle } from \"../player\";\nimport { selectPlayers } from \"../player/playerSlice\";\n\ntype Props = {\n  children?: React.ReactNode;\n  containing?: string;\n  tile: any;\n  loc: number;\n}\n\ntype CProps = {\n  children?: React.ReactNode;\n  containing: string;\n  loc?: number | string;\n  tile?: any;\n}\n\ntype SProps = {\n  rotation: number;\n  hover?: boolean;\n  selected?: boolean;\n}\n\nconst ContainedTile: React.FC<CProps> = ({ children, containing = \"empty\" }) => {\n  switch (containing) {\n    case \"empty\":\n      return (null);\n    case \"gate\":\n      return (<Gate />);\n    case \"key\":\n      return <KeyTile />\n    case \"four\":\n      return <PassageFourWay />\n    case \"straight\":\n      return <PassageStraight />\n    case \"t\":\n      return <PassageT />\n    case \"pit\":\n      return (<Pit />);\n    case \"start\":\n      return (<StartTile />);\n    case \"wax\":\n      return (<WaxEater />);\n    default:\n      return (null);\n  }\n}\n\nconst Tile: React.FC<Props> = ({ children, loc, containing = \"empty\", tile }) => {\n  const tiles = useSelector(selectTiles);\n  const players = useSelector(selectPlayers);\n\n  const dispatch = useDispatch();\n  const [rotation, setRotation] = useState(0);\n\n  const rotate = () => {\n    setRotation(rotation + 90 >= 360 ? rotation - 270 : rotation + 90);\n  }\n\n  const select: React.MouseEventHandler = (evt: React.MouseEvent) => {\n    evt.stopPropagation();\n    dispatch(selectTile(tile))\n  }\n\n  const handleSetTile = () => {\n    dispatch(setTileFromQueue(loc));\n  }\n\n  const handleSetPlayer = (evt: React.MouseEvent) => {\n    evt.stopPropagation();\n    dispatch(setPlayer({ location: loc, playerColor: players.playing }));\n  }\n\n  if (containing === \"empty\") {\n    return (<TileSlot onClick={handleSetTile} />);\n  } else {\n    return (\n      <TileSlot>\n        <TileContainer\n          onClick={rotate}\n          rotation={rotation}\n          selected={tiles.selected?.id === tile.id}\n        >\n          <span id=\"select\" onClick={select} />\n          <span id=\"setPlayer\" onClick={handleSetPlayer} />\n          {/* <Candle color={\"yellow\"} /> */}\n          {/* <Candle color={undefined} /> */}\n          <Candle color={tile.player} />\n          <ContainedTile containing={containing} tile={tile} />\n        </TileContainer>\n      </TileSlot>\n    )\n  }\n}\n\nconst TileSlot = styled.div`\n\tdisplay: flex;\n\tflex-flow: row nowrap;\n\tjustify-content: center;\n\talign-items: center;\n\tbackground-color: ${({ theme }) => theme.pDarkest};\n\tborder: 1px solid white;\n\theight: 100%; \n\twidth: 100%;\n  position: relative;\n`;\n\nconst TileContainer = styled.div<SProps>`\n\theight: 100%;\n\twidth: 100%;\n\tdisplay: flex;\n\tflex-flow: column nowrap;\n\tjustify-content: center;\n\talign-items: center;\n\toverflow: hidden;\n\tborder: 1px solid ${({ selected }) => selected ? \"blue\" : \"white\"};\n\tbackground: var(--pDarker);\n\ttransform: ${({ rotation }) => `rotate(${rotation}deg)`};\n\ttransition: transform 0.2s ease-in-out;\n  position: relative;\n  #select {\n    position: absolute;\n    cursor: pointer;\n    display: inline-block;\n    top: 5px;\n    left: 5px;\n    width: 15px;\n    height: 15px;\n    background-color: yellow;\n    z-index: 4;\n  }\n  #setPlayer {\n    position: absolute;\n    cursor: pointer;\n    display: inline-block;\n    top: 5px;\n    right: 5px;\n    width: 15px;\n    height: 15px;\n    background-color: blue;\n    z-index: 4;\n  }\n`;\n\nexport default Tile;","/Users/chazadmin/code/projects/night-cage/src/theme/themes.ts",[],"/Users/chazadmin/code/projects/night-cage/src/shared/layout/Heading.tsx",[],"/Users/chazadmin/code/projects/night-cage/src/shared/layout/Link.tsx",[],"/Users/chazadmin/code/projects/night-cage/src/shared/layout/Anchor.tsx",[],"/Users/chazadmin/code/projects/night-cage/src/shared/layout/MenuBurger.tsx",[],"/Users/chazadmin/code/projects/night-cage/src/features/tiles/index.ts",[],"/Users/chazadmin/code/projects/night-cage/src/features/tiles/tileSlice.ts",["130","131"],"import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState, store } from \"../../app/store\";\n// import { setPlayerLocation } from \"../player/playerSlice\";\nimport { Player } from \"../player/types\";\nimport { TileState, TileMap, Tile, Direction } from \"./types\";\n\nclass TileData implements Tile {\n  static nextId: number = 1;\n  id: number;\n  name: string;\n  directions: Direction[];\n  turnsToPit: boolean;\n  willBePit: boolean;\n  active: boolean;\n  location: number | undefined;\n  player: string | null;\n  // hostMultiple: boolean | undefined;\n\n  constructor(\n    name: string,\n    directions?: Direction[],\n    turnsToPit?: boolean,\n    willBePit?: boolean,\n    active?: boolean,\n    location?: number,\n    player?: string\n  ) {\n    // this.id = (Math.floor(Math.random() * 10000) + 10000).toString().substring(1);\n\n    this.id = TileData.nextId;\n    TileData.nextId++;\n    this.name = name;\n    this.directions = directions ?? [];\n    this.turnsToPit = turnsToPit ?? false;\n    this.willBePit = willBePit ?? false;\n    this.active = active ?? false;\n    this.location = location ?? undefined;\n    this.player = player ?? null;\n  }\n\n  // setPlayer(p: Player) {\n  //   this.player = p;\n  // }\n  // getPlayer(p: Player) {\n  //   return this.player;\n  // }\n}\n\nclass EmptyTileData extends TileData {\n  constructor() {\n    super(\n      \"empty\"\n    )\n  }\n}\n\n\n\nclass StartTileData extends TileData {\n  constructor() {\n    super(\n      \"start\",\n      [\"up\", \"right\"],\n      true,\n      true,\n      true\n    )\n  }\n}\n\nclass KeyTileData extends TileData {\n  constructor() {\n    super(\n      \"key\",\n      [\"down\", \"right\", \"left\", \"up\"],\n      true,\n      false,\n      false,\n    )\n  }\n}\n\nclass WaxEaterData extends TileData {\n  constructor() {\n    super(\n      \"wax\",\n      [\"up\", \"down\", \"left\", \"right\"],\n      false,\n      false,\n      false\n    );\n  }\n}\n\nclass GateData extends TileData {\n  hostMultiplePlayers = true;\n  constructor() {\n    super(\n      \"gate\",\n      [\"up\", \"down\", \"left\", \"right\"],\n      false,\n      false,\n      false,\n    )\n  }\n}\nclass StraightPassageData extends TileData {\n  constructor() {\n    super(\n      \"straight\",\n      [\"up\", \"down\"],\n      true,\n      false,\n      false,\n    )\n  }\n}\nclass PassageTData extends TileData {\n  constructor() {\n    super(\n      \"t\",\n      [\"up\", \"down\", \"left\"],\n      false,\n      false,\n      false,\n    )\n  }\n}\n\nclass PassageFourWay extends TileData {\n  constructor() {\n    super(\n      \"four\",\n      [\"up\", \"down\", \"left\", \"right\"],\n      false,\n      false,\n      false,\n    )\n  }\n}\n\n// initialize tile queue\nconst initTileQueue = new Array<TileData>();\ninitTileQueue.push(new StartTileData());\n\n\n// initialize tile bag\nconst bag = new Array<TileData>();\n\nfor (let i = 0; i < 3; i++) {\n  // initTileQueue.push(new EmptyTileData());\n  bag.push(new StartTileData());\n}\n\nfor (let i = 0; i < 6; i++) {\n  bag.push(new KeyTileData());\n}\nfor (let i = 0; i < 12; i++) {\n  bag.push(new WaxEaterData());\n}\nfor (let i = 0; i < 12; i++) {\n  bag.push(new PassageFourWay());\n}\nfor (let i = 0; i < 4; i++) {\n  bag.push(new GateData());\n}\nfor (let i = 0; i < 10; i++) {\n  bag.push(new StraightPassageData());\n}\nfor (let i = 0; i < 32; i++) {\n  bag.push(new PassageTData());\n}\n\n// initialize tile map\nconst initialTileMap: TileMap = {}\n\nfor (let i = 0; i < 36; i++) {\n  initialTileMap[i] = new EmptyTileData();\n  // initialTileMap[i] = null;\n}\n\nconst initialState: TileState = {\n  bag: bag,\n  board: initialTileMap,\n  queue: initTileQueue,\n  selected: null\n}\n\nexport const tileSlice = createSlice({\n  name: \"tiles\",\n  initialState,\n  reducers: {\n    drawTile: (state) => {\n      const i = Math.floor(Math.random() * state.bag.length);\n      const tileToMove = state.bag.splice(i, 1);\n      state.queue.push(tileToMove[0]);\n    },\n    setTile: (state, action: PayloadAction<{ location: number, tile: TileData }>) => {\n      state.board[action.payload.location] = action.payload.tile;\n    },\n    setTileFromQueue: (state, action: PayloadAction<number>) => {\n      if (state.selected !== null) {\n        const tile = state.selected;\n        const i = state.queue.findIndex(x => x.id === tile.id);\n        if (i >= 0) {\n          state.queue.splice(i, 1);\n          state.selected = null;\n          state.board[action.payload] = { ...tile, location: action.payload };\n        }\n      }\n    },\n    selectTile: (state, action: PayloadAction<TileData>) => {\n      if (state.selected) {\n        if (state.selected.id === action.payload.id) {\n          state.selected = null;\n        }\n      } else {\n        state.selected = action.payload;\n        return;\n      }\n    },\n    setPlayer: (state, action: PayloadAction<{ location: number, playerColor: string }>) => {\n      const { location, playerColor } = action.payload;\n      // setPlayerLocation({ location: location, options: state.board[location].directions });\n      // const copyPlayer = { ...player, location: location }\n      // player.location = location;\n      // copyPlayer.options = state.board[location].directions;\n      state.board[location].player = playerColor;\n    },\n  },\n  // extraReducers: (builder) => {\n  //   builder.addCase(setPlayerLocation, (state, action) => {\n  //     console.log({ state, action });\n  //   })\n  // }\n})\n\nexport const { drawTile, setTile, setTileFromQueue, selectTile, setPlayer } = tileSlice.actions;\nexport const selectTiles = (state: RootState) => state.tiles;\nexport default tileSlice.reducer;","/Users/chazadmin/code/projects/night-cage/src/features/tiles/PassageT.tsx",[],"/Users/chazadmin/code/projects/night-cage/src/features/tiles/PassageStraight.tsx",[],"/Users/chazadmin/code/projects/night-cage/src/features/tiles/Pit.tsx",[],"/Users/chazadmin/code/projects/night-cage/src/features/tiles/WaxEater.tsx",[],"/Users/chazadmin/code/projects/night-cage/src/features/tiles/StartTile.tsx",[],"/Users/chazadmin/code/projects/night-cage/src/features/tiles/Gate.tsx",[],"/Users/chazadmin/code/projects/night-cage/src/features/tiles/KeyTile.tsx",[],"/Users/chazadmin/code/projects/night-cage/src/features/tiles/PassageFourWay.tsx",[],"/Users/chazadmin/code/projects/night-cage/src/features/tiles/queue/Queue.tsx",[],"/Users/chazadmin/code/projects/night-cage/src/features/player/index.ts",[],"/Users/chazadmin/code/projects/night-cage/src/features/player/Candle.tsx",[],"/Users/chazadmin/code/projects/night-cage/src/features/player/CandleQueue.tsx",[],"/Users/chazadmin/code/projects/night-cage/src/features/player/playerSlice.ts",["132","133"],"import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\nimport { Player, State, Direction } from \"./types\";\nimport { setPlayer } from \"../tiles/tileSlice\";\n\nconst PlayerR: Player = {\n  color: \"red\",\n  location: -1,\n  options: [],\n  isLit: true,\n  nerveCount: 1,\n}\nconst PlayerG: Player = {\n  color: \"green\",\n  location: -1,\n  options: [],\n  isLit: true,\n  nerveCount: 1,\n}\nconst PlayerB: Player = {\n  color: \"blue\",\n  location: -1,\n  options: [],\n  isLit: true,\n  nerveCount: 1,\n}\nconst PlayerY: Player = {\n  color: \"yellow\",\n  location: -1,\n  options: [],\n  isLit: true,\n  nerveCount: 1,\n}\n\n// type PlayerState = {\n//   [key: string]: any;\n//   red: Player;\n//   green: Player,\n//   yellow: Player,\n//   blue: Player,\n//   playing: Player,\n// };\n\nconst initialState: State = {\n  red: PlayerR,\n  green: PlayerG,\n  blue: PlayerB,\n  yellow: PlayerY,\n  playing: \"red\",\n}\n\nexport const playerSlice = createSlice({\n  name: \"players\",\n  initialState,\n  reducers: {\n    // setPlayerLocation: (state, action: PayloadAction<{ location: number, options: Direction[] }>) => {\n    //   const { location, options } = action.payload;\n    //   const i = (state.playing.color).toString();\n    //   state[i].location = location;\n    //   state[i].options = options;\n    // }\n  },\n  extraReducers: (builder) => {\n    builder.addCase(setPlayer, (state, action) => {\n      const { location, playerColor } = action.payload;\n      console.log({ state, action });\n      state[playerColor].location = location;\n    })\n  }\n\n})\n\n// export const { setPlayerLocation } = playerSlice.actions;\n\nexport const selectPlayers = (state: RootState) => state.players;\nexport default playerSlice.reducer;","/Users/chazadmin/code/projects/night-cage/src/features/player/types.ts",[],{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":5,"column":8,"nodeType":"140","messageId":"141","endLine":5,"endColumn":14},{"ruleId":"134","replacedBy":"142"},{"ruleId":"136","replacedBy":"143"},{"ruleId":"138","severity":1,"message":"144","line":1,"column":17,"nodeType":"140","messageId":"141","endLine":1,"endColumn":29},{"ruleId":"138","severity":1,"message":"145","line":2,"column":21,"nodeType":"140","messageId":"141","endLine":2,"endColumn":26},{"ruleId":"138","severity":1,"message":"146","line":4,"column":10,"nodeType":"140","messageId":"141","endLine":4,"endColumn":16},{"ruleId":"138","severity":1,"message":"147","line":1,"column":23,"nodeType":"140","messageId":"141","endLine":1,"endColumn":36},{"ruleId":"138","severity":1,"message":"148","line":3,"column":25,"nodeType":"140","messageId":"141","endLine":3,"endColumn":34},"no-native-reassign",["149"],"no-negated-in-lhs",["150"],"@typescript-eslint/no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar",["149"],["150"],"'ReactElement' is defined but never used.","'store' is defined but never used.","'Player' is defined but never used.","'PayloadAction' is defined but never used.","'Direction' is defined but never used.","no-global-assign","no-unsafe-negation"]